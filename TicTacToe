#include <vector>
#include <iostream>
#include <cmath>

using namespace std;

class state
{
public:
	state* father;
	int cost;
	char board[3][3];

	state()
	{
		for (int i = 0; i < 3; i++)
		{
			for (int j = 0; j < 3; j++)
			{
				board[i][j] = '.';
			}

		}
		father = NULL;
		cost = 0;

	}

	state(state* father, int cost)
	{
		this->father = father;
		this->cost = cost;


	}
	void printState()
	{
		cout << "  0   1   2 " << endl;
		for (int i = 0; i < 3; i++)
		{
			cout << "    |   |   " << endl;
			for (int j = 0; j < 3; j++)
			{
				if (j == 0)
					cout << i;
				cout << " " << board[i][j] << " ";
				if (j < 2)
					cout << "|";
			}
			cout << endl;
			if (i < 2)
				cout << " ---+---+---" << endl;
		}
	}
};

class game
{
public:
	state* root;
	state* currentState;
	int nbOfPlayers;


	game(int input)
	{
		bool flag = 0;
		root = new state;
		currentState = root;
		nbOfPlayers = input;
		int playerturn = 0;
		int pieceX = -1;
		int pieceY = -1;
		int moveX = -1;
		int moveY = -1;
		int compteur = 0;
		if (nbOfPlayers == 2)
		{
			while (flag != 1)
			{
				system("cls");
				currentState->printState();
				if (compteur < 6)
				{
					cout << "input the cardinal position you want to put a piece on. ex: 0 2" << endl;
					cout << "player " << playerturn % 2 + 1 << "'s turn" << endl;
					cin >> moveX;
					cin >> moveY;
					if (validPlacement(moveX, moveY) == true)
					{
						if (playerturn % 2 + 1 == 1)
						{
							currentState->board[moveY][moveX] = 'x';
							if (winningState(currentState, (playerturn % 2 + 1), moveX, moveY))
								flag = true;
							playerturn++;
							compteur++;
						}
						else
							if (playerturn % 2 + 1 == 2)
							{
								currentState->board[moveY][moveX] = 'o';
								if (winningState(currentState, (playerturn % 2 + 1), moveX, moveY))
									flag = true;
								playerturn++;
								compteur++;
							}
					}
				}
				else
				{
					cout << "input in x and y the piece you want to move, and the position you want to move it to. ex 0 0 1 0" << endl;
					cout << "player " << playerturn % 2 + 1 << "'s turn" << endl;
					cin >> pieceX;
					cin >> pieceY;
					cin >> moveX;
					cin >> moveY;
					if (validMove(pieceX, pieceY, moveX, moveY, playerturn % 2 + 1) == true)
					{
						if (winningState(currentState, (playerturn % 2 + 1), moveX, moveY) == true)
							flag = true;
						playerturn++;
					}

				}
				system("cls");
			}
			currentState->printState();
			cout << "Player " << playerturn % 2 +1 << " wins!" << endl;
		}
	}

	bool validPlacement(int x, int y)
	{
		if (x < 3 && x >= 0 && y < 3 && y >= 0)
		{
			if (currentState->board[y][x] != 'x' && currentState->board[y][x] != 'o')
				return true;
			else false;
		}
	}

	bool validMove(float x, float y, float x2, float y2, int playerTurn)
	{
		char player = 'w';
		if (playerTurn == 1)
		{
			player = 'x';
		}
		else
			if (playerTurn == 2)
			{
				player = 'o';
			}

		if (x < 3 && x2 < 3 && y < 3 && y2 < 3 && x >= 0 && x2 >= 0 && y >= 0 && y2 >= 0)
		{
			if (abs(x - x2) < 2 && abs(y - y2) < 2)
			{
				if (currentState->board[int(y)][int(x)] == player)
				{
					if (currentState->board[int(y2)][int(x2)] == '.')
					{
						if (abs((x2 - x) / (y2 - y)) == 1)
						{
							if ((x == 0 && (y == 0 || y == 2)) || (x == 2 && (y == 0 || y == 2)) || (x == 1 && y == 1))
							{
								currentState->board[int(y)][int(x)] = '.';
								currentState->board[int(y2)][int(x2)] = player;
								return true;
							}
						}
						else
						{
							currentState->board[int(y)][int(x)] = '.';
							currentState->board[int(y2)][int(x2)] = player;
							return true;
						}
					}
				}
			}
		}
		return false;
	}

	bool winningState(state* currentState, int playerTurn, int x, int y)
	{
		char player = 'w';
		if (playerTurn == 1)
		{
			player = 'x';
		}
		else
			if (playerTurn == 2)
			{
				player = 'o';
			}
		// check colonne
		for (int i = 0; i < 3; i++)
		{
			if (currentState->board[i][x] != player)
				break;
			if (i == 2)
				return true;
		}
		//check ligne
		for (int i = 0; i < 3; i++)
		{
			if (currentState->board[y][i] != player)
				break;
			if (i == 2)
				return true;
		}
		//check diagonal principale
		if (x == y)
		{
			for (int i = 0; i < 3; i++)
			{
				if (currentState->board[i][i] != player)
					break;
				if (i == 2)
					return true;
			}
		}
		// check diagonal secondaire
		for (int i = 0; i < 3; i++)
		{
			if (currentState->board[i][(2) - i] != player)
				break;
			if (i == 2)
				return true;
		}
		return false;
	}
};

int main()
{
	cout << " ___________________________________________________________________________________________ " << endl;
	cout << "|                                                                                           |" << endl;
	cout << "|                                                                                           |" << endl;
	cout << "|  $$$$$$$$\\ $$\\                $$$$$$$$\\                       $$$$$$$$\\                   |" << endl;
	cout << "|  \\__$$  __|\\__|              \\__$$  __|                      \\__$$  __|                   |" << endl;
	cout << "|     $$ |   $$\\  $$$$$$$\\         $$ | $$$$$$\\   $$$$$$$\\         $$ | $$$$$$\\   $$$$$$\\   |" << endl;
	cout << "|     $$ |   $$ |$$  _____|$$$$$$\\ $$ | \\____$$\\ $$  _____|$$$$$$\\ $$ |$$  __$$\\ $$  __$$\\  |" << endl;
	cout << "|     $$ |   $$ |$$ /      \\______|$$ | $$$$$$$ |$$ /      \\______|$$ |$$ /  $$ |$$$$$$$$ | |" << endl;
	cout << "|     $$ |   $$ |$$ |              $$ |$$  __$$ |$$ |              $$ |$$ |  $$ |$$   ____| |" << endl;
	cout << "|     $$ |   $$ |\\$$$$$$$\\         $$ |\\$$$$$$$ |\\$$$$$$$\\         $$ |\\$$$$$$  |\\$$$$$$$\\  |" << endl;
	cout << "|     \\__|   \\__| \\_______|        \\__| \\_______| \\_______|        \\__| \\______/  \\_______| |" << endl;
	cout << "|                                                                                           |" << endl;
	cout << "|                                                                                           |" << endl;
	cout << "|                                                                                           |" << endl;
	cout << "|                                          1-Player                                         |" << endl;
	cout << "|                                                                                           |" << endl;
	cout << "|                                          2-Player                                         |" << endl;
	cout << "|                                                                                           |" << endl;
	cout << "|                                                                                           |" << endl;
	cout << "|                            W-Up, S-Down, A-Left, D-Right, Enter                           |" << endl;
	cout << " ------------------------------------------------------------------------------------------- " << endl;

	system("pause");

	bool playerFlag = true;
	char input = 0;
	game(2);



	return 0;
}
