#include <vector>
#include <iostream>
#include <cmath>

using namespace std;

class state
{
public:
	state* path;
	int cost;
	int nbPieces;
	char board[3][3];


	state()
	{
		for (int i = 0; i < 3; i++)
		{
			for (int j = 0; j < 3; j++)
			{
				board[i][j] = '.';
			}

		}
		path = NULL;
		cost = 0;
		nbPieces = 0;

	}

	state(state* father, int cost, int x, int y, int playerturn, int nbPieces)
	{
		this->path = father;
		this->cost = cost;
		char player;
		if (playerturn == 1)
			player = 'x';
		if (playerturn == 2)
			player = 'o';

		for (int i = 0; i < 3; i++)
		{
			for (int j = 0; j < 3; j++)
			{
				board[j][i] = father->board[j][i];
			}
		}
		board[y][x] = player;

	}

	state(state* father, int cost, int x, int y, int playerturn, int nbPieces, int x2, int y2)
	{
		this->path = father;
		this->cost = cost;
		char player;
		if (playerturn == 1)
			player = 'x';
		if (playerturn == 2)
			player = 'o';

		for (int i = 0; i < 3; i++)
		{
			for (int j = 0; j < 3; j++)
			{
				board[j][i] = father->board[j][i];
			}
		}
		board[y][x] = '.';
		board[y2][x2] = player;

	}
	void printState()
	{
		cout << "  0   1   2 " << endl;
		for (int i = 0; i < 3; i++)
		{
			cout << "    |   |   " << endl;
			for (int j = 0; j < 3; j++)
			{
				if (j == 0)
					cout << i;
				cout << " " << board[i][j] << " ";
				if (j < 2)
					cout << "|";
			}
			cout << endl;
			if (i < 2)
				cout << " ---+---+---" << endl;
		}
	}
};

void stateCopier(state* root, state* copiedState)
{
	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			copiedState->board[j][i] = root->board[j][i];
		}
	}
}

class game
{
public:
	state* root;
	state* currentState;
	int nbOfPlayers;


	game(int input)
	{
		bool flag = 0;
		root = new state;
		currentState = root;
		nbOfPlayers = input;
		int playerturn = 0;
		int pieceX = -1;
		int pieceY = -1;
		int moveX = -1;
		int moveY = -1;
		int compteur = 0;
		if (nbOfPlayers == 2)
		{
			while (flag != 1)
			{
				system("cls");
				currentState->printState();
				if (compteur < 6)
				{
					cout << "input the cardinal position you want to put a piece on. ex: 0 2" << endl;
					cout << "player " << playerturn % 2 + 1 << "'s turn" << endl;
					cin >> moveX;
					cin >> moveY;
					if (validDrop(moveX, moveY, currentState) == true)
					{
						if (playerturn % 2 + 1 == 1)
						{
							currentState->board[moveY][moveX] = 'x';
							if (winningStateHuman(currentState, (playerturn % 2 + 1), moveX, moveY))
								flag = true;
							playerturn++;
							compteur++;
						}
						else
							if (playerturn % 2 + 1 == 2)
							{
								currentState->board[moveY][moveX] = 'o';
								if (winningStateHuman(currentState, (playerturn % 2 + 1), moveX, moveY))
									flag = true;
								playerturn++;
								compteur++;
							}
					}
				}
				else
				{
					cout << "input in x and y the piece you want to move, and the position you want to move it to. ex 0 0 1 0" << endl;
					cout << "player " << playerturn % 2 + 1 << "'s turn" << endl;
					cin >> pieceX;
					cin >> pieceY;
					cin >> moveX;
					cin >> moveY;
					if (validMove(currentState, pieceX, pieceY, moveX, moveY, playerturn % 2 + 1) == true)
					{
						if (playerturn % 2 + 1 == 1)
						{
							currentState->board[pieceX][pieceX] = '.';
							currentState->board[moveY][moveX] = 'x';
							if (winningStateHuman(currentState, (playerturn % 2 + 1), moveX, moveY) == true)
								flag = true;
							playerturn++;
						}
						if (playerturn % 2 + 1 == 2)
						{
							currentState->board[pieceX][pieceX] = '.';
							currentState->board[moveY][moveX] = 'o';
							if (winningStateHuman(currentState, (playerturn % 2 + 1), moveX, moveY) == true)
								flag = true;
							playerturn++;
						}
					}

				}
				system("cls");
			}
			currentState->printState();
			cout << "Player " << playerturn % 2 + 1 << " wins!" << endl;
		}
		else if (nbOfPlayers == 1)
		{
			int playernb;
			cout << "do you want to be player 1 or 2?" << endl;
			cin >> playernb;
			if (playernb == 1)
			{
				while (flag != true)
				{
					system("cls");
					currentState->printState();
					if (compteur < 6)
					{
						cout << "input the cardinal position you want to put a piece on. ex: 0 2" << endl;
						cout << "player " << '1' << "'s turn" << endl;

						while (validDrop(moveX, moveY, currentState) != true)
						{
							cin >> moveX;
							cin >> moveY;
						}
						currentState->board[moveY][moveX] = 'x';
						if (winningStateHuman(currentState, 1, moveX, moveY))
							flag = true;
						compteur++;
					}
					system("cls");
					currentState->printState();
					if (compteur < 6)
					{
						state *temp = MinMax(currentState, 0, 2, compteur);
						temp->nbPieces++;
						currentState = temp;
						compteur++;
					}
					if (compteur > 5 )
					{
						system("cls");
						currentState->printState();
						cout << "input in x and y the piece you want to move, and the position you want to move it to. ex 0 0 1 0" << endl;
						cout << "player " << playerturn % 2 + 1 << "'s turn" << endl;
						cin >> pieceX;
						cin >> pieceY;
						cin >> moveX;
						cin >> moveY;
						while (validMove(currentState, pieceX, pieceY, moveX, moveY, playerturn % 2 + 1) != true)
						{
							cin >> pieceX;
							cin >> pieceY;
							cin >> moveX;
							cin >> moveY;
						}
						currentState->board[pieceY][pieceX] = '.';
						currentState->board[moveY][moveX] = 'x';
						if (winningStateHuman(currentState, (1), moveX, moveY) == true)
						{
							system("cls");
							currentState->printState();
							cout << "Player 1 won!" << endl;
							return;
						}
							
						compteur++;
						if (compteur > 5)
						{
							system("cls");
							currentState->printState();

							state *temp = MinMax(currentState, 0, 2, compteur);
							temp->nbPieces++;
							currentState = temp;
							compteur++;
							if (winningStateBot(currentState, 2))
							{
								system("cls");
								currentState->printState();
								cout << "Player 2 won!"<<endl;
								return;
							}
						}
					}
				}
			}
		else if (playernb == 2)
			{
				while (flag != true)
				{
					system("cls");
					currentState->printState();
					if (compteur < 6)
					{
						state *temp = MinMax(currentState, 0, 1, compteur);
						temp->nbPieces++;
						currentState = temp;
						compteur++;
					}
					
					if (winningStateBot(currentState, 1))
					{
						system("cls");
						currentState->printState();
						cout << "Player 1 won!" << endl;
						return;
					}
					system("cls");
					currentState->printState();
					if (compteur < 6)
					{
						cout << "input the cardinal position you want to put a piece on. ex: 0 2" << endl;
						cout << "player 2's turn" << endl;

						while (validDrop(moveX, moveY, currentState) != true)
						{
							cin >> moveX;
							cin >> moveY;
						}
						currentState->board[moveY][moveX] = 'o';
						
						if (winningStateHuman(currentState, 2, moveX, moveY))
						{
							system("cls");
							currentState->printState();
							cout << "Player 2 won!" << endl;
							return;
						}
						system("cls");
						currentState->printState();
						compteur++;
					}
					if (compteur > 5)
					{
						state *temp = MinMax(currentState, 0, 1, compteur);
						temp->nbPieces++;
						currentState = temp;
						compteur++;
						if (winningStateBot(currentState, 1))
						{
							system("cls");
							currentState->printState();
							cout << "Player 1 won!" << endl;
							return;
						}

						system("cls");
						currentState->printState();

						cout << "input in x and y the piece you want to move, and the position you want to move it to. ex 0 0 1 0" << endl;
						cout << "player 2's turn" << endl;
						cin >> pieceX;
						cin >> pieceY;
						cin >> moveX;
						cin >> moveY;
						while (validMove(currentState, pieceX, pieceY, moveX, moveY, 2) != true)
						{
							cin >> pieceX;
							cin >> pieceY;
							cin >> moveX;
							cin >> moveY;
						}
						currentState->board[pieceX][pieceX] = '.';
						currentState->board[moveY][moveX] = 'o';
						if (winningStateHuman(currentState, (2), moveX, moveY) == true)
						{
							system("cls");
							currentState->printState();
							cout << "Player 2 won!" << endl;
							return;
						}
						system("cls");
						currentState->printState();
						compteur++;
					}
				}
			} 
		}
	}

	state* MinMax(state* root, int depth, int playerTurn, int nbPieces)
	{
		int bestScore = -1000;
		if (winningStateBot(root, playerTurn % 2 + 1) == true)
		{
			root->cost = -100;
			return root;
		}
		state* path = NULL;
		if (depth == 3)
		{
			root->cost = euristiqueDrop(root, playerTurn % 2 + 1);
			return root;
		}
		else
		{
			if (nbPieces < 6)
			{
				playerTurn++;
				vector <state*> dropList;
				generateDrop(dropList, root, playerTurn % 2 + 1, nbPieces+1);

				int i = dropList.size();
				for (int n = 0; n < i; n++)
				{
					state* temp = MinMax(dropList[n], depth + 1, playerTurn, nbPieces + 1);
					dropList[n]->cost = temp->cost;
					dropList[n]->cost *= -1;
					if (bestScore < dropList[n]->cost)
					{
						bestScore = dropList[n]->cost;
						path = dropList[n];
					}
				}
			}
			else
			{
				playerTurn++;
				vector <state*> moveList;
				generateMove(moveList, root, playerTurn % 2 +1, nbPieces);
				int i = moveList.size();
				for (int n = 0; n < i; n++)
				{
					state *temp = MinMax(moveList[n], depth + 1, playerTurn, nbPieces);
					moveList[n]->cost = temp->cost;
					moveList[n]->cost *= -1;
					if (bestScore < moveList[n]->cost)
					{
						bestScore = moveList[n]->cost;
						path = moveList[n];
					}
				}
			}
		}
		return path;
	}

	int euristiqueDrop(state* root, int playerTurn)
	{
		char player;
		if (playerTurn == 1)
			player = 'x';
		if (playerTurn == 2)
			player = 'o';
		int points = 0;
		//check your colonne
		bool flag = 0;
		for (int i = 0; i < 3; i++)
		{
			flag = 0;
			int tempPoints = 0;
			for (int j = 0; j < 3; j++)
			{
				if (root->board[j][i] == player)
				{
					tempPoints++;
					if (tempPoints > 1 && flag != 1)
					{
						tempPoints *= 2;
						flag = 1;
					}
				}
				else
				{
					if (root->board[j][i] != '.')
					{
						tempPoints = 0;
						break;
					}
				}
			}
			points += tempPoints;
		}
		//check his colonne

		for (int i = 0; i < 3; i++)
		{
			flag = 0;
			int tempPoints = 0;
			for (int j = 0; j < 3; j++)
			{
				if (root->board[j][i] == player)
				{
					tempPoints = 0;
					break;
				}
				else
				{
					if (root->board[j][i] != '.')
						tempPoints++;
					if (tempPoints > 1 && flag != 1)
					{
						tempPoints *= 3;
						flag = 1;
					}

				}
			}
			points -= tempPoints;
		}
		//check your row

		for (int i = 0; i < 3; i++)
		{
			flag = 0;
			int tempPoints = 0;
			for (int j = 0; j < 3; j++)
			{
				if (root->board[i][j] == player)
				{
					tempPoints++;
					if (tempPoints > 1 && flag != 1)
					{
						tempPoints *= 2;

						flag = 1;
					}
				}
				else
				{
					if (root->board[i][j] != '.')
					{
						tempPoints = 0;
						break;
					}
				}
			}
			points += tempPoints;
		}
		// check his row

		for (int i = 0; i < 3; i++)
		{
			flag = 0;
			int tempPoints = 0;
			for (int j = 0; j < 3; j++)
			{
				if (root->board[i][j] == player)
				{
					tempPoints = 0;
					break;
				}
				else
				{
					if (root->board[i][j] != '.')
						tempPoints++;
					if (tempPoints > 1 && flag != 1)
					{
						tempPoints *= 3;
						flag = 1;
					}

				}
			}
			points -= tempPoints;
		}
		//check your primary diagonal

		int tempPoints = 0;
		for (int i = 0; i < 3; i++)
		{
			flag = 0;
			if (root->board[i][i] == player)
			{
				tempPoints++;
				if (tempPoints > 1 && flag != 1)
				{
					tempPoints *= 2;
					flag = 1;
				}
			}
			else
			{
				if (root->board[i][i] != '.')
				{
					tempPoints = 0;
					break;
				}
			}
		}
		points += tempPoints;
		//check his primary diagonal
		tempPoints = 0;
		for (int i = 0; i < 3; i++)
		{
			flag = 0;
			if (root->board[i][i] == player)
			{
				tempPoints = 0;
				break;
			}
			else
			{
				if (root->board[i][i] != '.')
					tempPoints++;
				if (tempPoints > 1 && flag != 1)
				{
					tempPoints *= 3;
				}
			}
		}
		points -= tempPoints;
		//check your secondary diagonal
		tempPoints = 0;
		for (int i = 0; i < 3; i++)
		{
			flag = 0;
			if (root->board[i][(2) - i] == player)
			{
				tempPoints++;
				if (tempPoints > 1 && flag != 1)
				{
					tempPoints *= 2;
					flag = 1;
				}
			}
			else
			{
				if (root->board[i][(2) - i] != '.')
				{
					tempPoints = 0;
					break;
				}
			}

		}
		points += tempPoints;

		//check his secondary diagonal
		tempPoints = 0;
		for (int i = 0; i < 3; i++)
		{
			flag = 0;
			if (root->board[i][(2) - i] == player)
			{
				tempPoints = 0;
				break;
			}
			else
			{
				if (root->board[i][(2) - i] != '.')
					tempPoints++;
				if (tempPoints > 1 && flag != 1)
				{
					tempPoints *= 3;
				}

			}
		}
		points -= tempPoints;
		points = points*-1;
		return points;
	}

	void generateDrop(vector<state*>& dropList, state* root, int playerTurn, int nbPieces)
	{
		for (int i = 0; i < 3; i++)
		{
			for (int j = 0; j < 3; j++)
			{
				if (validDrop(i, j, root) == true)
				{
					state* temp = new state(root, 0, i, j, playerTurn, nbPieces);
					dropList.push_back(temp);
				}
			}
		}
	}

	void generateMove(vector<state*>& moveList, state* root, int playerTurn, int nbPieces)
	{
		for (int i = 0; i < 3; i++)
		{
			for (int j = 0; j < 3; j++)
			{
				for (int x = 0; x < 3; x++)
				{
					for (int y = 0; y < 3; y++)
					{
						if (validMove(root, i, j, x, y, playerTurn) == true)
						{
							moveList.push_back(new state(root, 0, i, j, playerTurn, nbPieces, x, y));
						}
					}
				}
			}
		}
	}

	bool validDrop(int x, int y, state* temp)
	{
		if (x < 3 && x >= 0 && y < 3 && y >= 0)
		{
			if (temp->board[y][x] == '.')
				return true;
			else
				return false;
		}
	}

	bool validMove(state* root, float x, float y, float x2, float y2, int playerTurn)
	{
		char player;
		if (playerTurn == 1)
			player = 'x';
		if (playerTurn == 2)
			player = 'o';
		if (x < 3 && x2 < 3 && y < 3 && y2 < 3 && x >= 0 && x2 >= 0 && y >= 0 && y2 >= 0)
		{
			if (abs(x - x2) < 2 && abs(y - y2) < 2)
			{
				if (root->board[int(y)][int(x)] == player)
				{
					if (root->board[int(y2)][int(x2)] == '.')
					{
						if (abs((x2 - x) / (y2 - y)) == 1)
						{
							if ((x == 0 && (y == 0 || y == 2)) || (x == 2 && (y == 0 || y == 2)) || (x == 1 && y == 1))
							{
								return true;
							}
						}
						else
						{
							return true;
						}
					}
				}
			}
		}
		return false;
	}

	bool winningStateHuman(state* currentState, int playerTurn, int x, int y)
	{
		char player = 'w';
		if (playerTurn == 1)
		{
			player = 'x';
		}
		else
			if (playerTurn == 2)
			{
				player = 'o';
			}
		// check colum
		for (int i = 0; i < 3; i++)
		{
			if (currentState->board[i][x] != player)
				break;
			if (i == 2)
				return true;
		}
		//check row
		for (int i = 0; i < 3; i++)
		{
			if (currentState->board[y][i] != player)
				break;
			if (i == 2)
				return true;
		}
		//check primary diagonal 
		if (x == y)
		{
			for (int i = 0; i < 3; i++)
			{
				if (currentState->board[i][i] != player)
					break;
				if (i == 2)
					return true;
			}
		}
		// check secondary diagonal
		for (int i = 0; i < 3; i++)
		{
			if (currentState->board[i][(2) - i] != player)
				break;
			if (i == 2)
				return true;
		}
		return false;
	}

	bool winningStateBot(state* root, int playerTurn)
	{
		char player;
		if (playerTurn == 1)
			player = 'x';
		if (playerTurn == 2)
			player = 'o';
		//check colonne
		for (int i = 0; i < 3; i++)
		{
			for (int j = 0; j < 3; j++)
			{
				if (root->board[j][i] != player)
					break;
				if (j == 2)
					return true;
			}
		}
		//check row
		for (int i = 0; i < 3; i++)
		{
			for (int j = 0; j < 3; j++)
			{
				if (root->board[i][j] != player)
					break;
				if (j == 2)
					return true;
			}
		}
		//check primary diagonal
		for (int i = 0; i < 3; i++)
		{
			if (root->board[i][i] != player)
				break;
			if (i == 2)
				return true;
		}
		//check secondary diagonal
		for (int i = 0; i < 3; i++)
		{
			if (root->board[i][(2) - i] != player)
				break;
			if (i == 2)
				return true;
		}
		return false;
	}
};

int main()
{
	cout << " ___________________________________________________________________________________________ " << endl;
	cout << "|                                                                                           |" << endl;
	cout << "|                                                                                           |" << endl;
	cout << "|  $$$$$$$$\\ $$\\               $$$$$$$$\\                       $$$$$$$$\\                    |" << endl;
	cout << "|  \\__$$  __|\\__|              \\__$$  __|                      \\__$$  __|                   |" << endl;
	cout << "|     $$ |   $$\\  $$$$$$$\\         $$ | $$$$$$\\   $$$$$$$\\         $$ | $$$$$$\\   $$$$$$\\   |" << endl;
	cout << "|     $$ |   $$ |$$  _____|$$$$$$\\ $$ | \\____$$\\ $$  _____|$$$$$$\\ $$ |$$  __$$\\ $$  __$$\\  |" << endl;
	cout << "|     $$ |   $$ |$$ /      \\______|$$ | $$$$$$$ |$$ /      \\______|$$ |$$ /  $$ |$$$$$$$$ | |" << endl;
	cout << "|     $$ |   $$ |$$ |              $$ |$$  __$$ |$$ |              $$ |$$ |  $$ |$$   ____| |" << endl;
	cout << "|     $$ |   $$ |\\$$$$$$$\\         $$ |\\$$$$$$$ |\\$$$$$$$\\         $$ |\\$$$$$$  |\\$$$$$$$\\  |" << endl;
	cout << "|     \\__|   \\__| \\_______|        \\__| \\_______| \\_______|        \\__| \\______/  \\_______| |" << endl;
	cout << "|                                                                                           |" << endl;
	cout << "|                                                                                           |" << endl;
	cout << "|                                                                                           |" << endl;
	cout << "|                                          1-Player                                         |" << endl;
	cout << "|                                                                                           |" << endl;
	cout << "|                                          2-Player                                         |" << endl;
	cout << "|                                                                                           |" << endl;
	cout << "|                                                                                           |" << endl;
	cout << " ------------------------------------------------------------------------------------------- " << endl;

	system("pause");

	int playerNb = 0;
	cout << "1 Player or 2 Player?" << endl;
	cin >> playerNb;
	game a(playerNb);

	return 0;
}
